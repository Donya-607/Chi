//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 camPos;                     // Offset:  128 Size:    16
//   
//   struct lineLight
//   {
//       
//       float4 direction;              // Offset:  144
//       float4 color;                  // Offset:  160
//
//   } line_light;                      // Offset:  144 Size:    32
//   
//   struct Light
//   {
//       
//       float4 pos;                    // Offset:  176
//       float4 color;                  // Offset:  192
//       float4 attenuate;              // Offset:  208
//
//   } pntLight[5];                     // Offset:  176 Size:   240
//   
//   struct Material
//   {
//       
//       float4 ambient;                // Offset:  416
//       float4 diffuse;                // Offset:  432
//       float4 specular;               // Offset:  448
//
//   } material;                        // Offset:  416 Size:    48
//   row_major float4x4 bone_transforms[64];// Offset:  464 Size:  4096 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuse_map_sample_state          sampler      NA          NA             s0      1 
// diffuse_map                       texture  float4          2d             t0      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// COLOR                    0   xyzw        2     NONE   float      w
// NORMAL                   0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[29], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.w
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 12
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.posw.x; v1.y <- pin.posw.y; v1.z <- pin.posw.z; v1.w <- pin.posw.w; 
//   v2.x <- pin.color.x; v2.y <- pin.color.y; v2.z <- pin.color.z; v2.w <- pin.color.w; 
//   v3.x <- pin.normal.x; v3.y <- pin.normal.y; v3.z <- pin.normal.z; v3.w <- pin.normal.w; 
//   v4.x <- pin.texcoord.x; v4.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 42 "D:\Develop\Chi\Chi\Chi\Chi\skinned_mesh_ps.hlsl"
mov r0.xyz, v3.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 43
mov r1.xyz, -v1.xyzx
add r1.xyz, r1.xyzx, cb0[8].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- V.x; r1.y <- V.y; r1.z <- V.z

#line 46
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // r2.x <- sampleColor.x; r2.y <- sampleColor.y; r2.z <- sampleColor.z; r2.w <- sampleColor.w

#line 47
mov r3.xyzw, -cb0[9].xyzw
dp4 r0.w, r3.xyzw, r3.xyzw
rsq r0.w, r0.w
mul r3.xyzw, r0.wwww, r3.xyzw  // r3.x <- _L.x; r3.y <- _L.y; r3.z <- _L.z; r3.w <- _L.w

#line 49
mov r2.xyz, r2.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z

#line 51
itof r0.w, l(0)
dp4 r1.w, r3.xyzw, v3.xyzw
max r0.w, r0.w, r1.w
mul r3.xyz, r0.wwww, cb0[10].xyzx
mul r3.xyz, r2.xyzx, r3.xyzx  // r3.x <- _color.x; r3.y <- _color.y; r3.z <- _color.z

#line 54
mov r0.w, l(0)  // r0.w <- i
mov r4.xyz, r3.xyzx  // r4.x <- _color.x; r4.y <- _color.y; r4.z <- _color.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r3.w, r1.w, l(5)
  breakc_z r3.w

#line 56
  imul null, r3.w, r1.w, l(3)
  itof r4.w, l(0)
  eq r3.w, r4.w, cb0[r3.w + 11].w
  if_nz r3.w

#line 57
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 59
  imul null, r3.w, r1.w, l(3)
  mov r5.xyz, -v1.xyzx
  add r5.xyz, r5.xyzx, cb0[r3.w + 11].xyzx  // r5.x <- L.x; r5.y <- L.y; r5.z <- L.z

#line 60
  dp3 r3.w, r5.xyzx, r5.xyzx
  sqrt r3.w, r3.w  // r3.w <- D

#line 61
  dp3 r4.w, r5.xyzx, r5.xyzx
  rsq r4.w, r4.w
  mul r5.xyz, r4.wwww, r5.xyzx

#line 62
  imul null, r4.w, r1.w, l(3)
  imul null, r5.w, r1.w, l(3)
  mul r5.w, r3.w, cb0[r5.w + 13].y
  add r4.w, r5.w, cb0[r4.w + 13].x
  imul null, r5.w, r1.w, l(3)
  mul r5.w, r3.w, cb0[r5.w + 13].z
  mul r3.w, r3.w, r5.w
  add r3.w, r3.w, r4.w
  div r3.w, l(1.000000), r3.w
  max r3.w, r3.w, l(0.000000)
  min r3.w, r3.w, l(1.000000)  // r3.w <- A

#line 64
  nop 
  mov r6.xyz, r0.xyzx
  mov r5.xyz, r5.xyzx
  imul null, r4.w, r1.w, l(3)
  mov r7.xyz, cb0[r4.w + 12].xyzx
  mov r8.xyz, cb0[27].xyzx
  mov r3.w, r3.w

#line 4
  dp3 r4.w, r6.xyzx, r5.xyzx  // r4.w <- D

#line 5
  itof r5.w, l(0)
  max r4.w, r4.w, r5.w

#line 6
  mul r6.xyz, r7.xyzx, r8.xyzx
  mul r4.w, r3.w, r4.w
  mul r6.xyz, r4.wwww, r6.xyzx  // r6.x <- <Diffuse return value>.x; r6.y <- <Diffuse return value>.y; r6.z <- <Diffuse return value>.z

#line 64
  mov r6.xyz, r6.xyzx  // r6.x <- diffuseColor.x; r6.y <- diffuseColor.y; r6.z <- diffuseColor.z

#line 67
  nop 
  mov r7.xyz, r0.xyzx
  mov r5.xyz, r5.xyzx
  imul null, r4.w, r1.w, l(3)
  mov r8.xyz, cb0[r4.w + 12].xyzx
  mov r9.xyz, r1.xyzx
  mov r10.xyz, cb0[28].xyzx
  mov r4.w, cb0[28].w
  mov r3.w, r3.w

#line 13
  mul r11.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  dp3 r5.w, r7.xyzx, r5.xyzx
  mul r7.xyz, r5.wwww, r11.xyzx
  mov r5.xyz, -r5.xyzx
  add r5.xyz, r5.xyzx, r7.xyzx  // r5.x <- H.x; r5.y <- H.y; r5.z <- H.z

#line 15
  dp3 r5.z, r5.xyzx, r9.xyzx
  mov r5.xyz, r5.zzzz  // r5.x <- S.x; r5.y <- S.y; r5.z <- S.z

#line 16
  itof r7.xyz, l(0, 0, 0, 0)
  max r5.xyz, r5.xyzx, r7.xyzx

#line 17
  log r5.xyz, r5.xyzx
  mul r5.xyz, r4.wwww, r5.xyzx
  exp r5.xyz, r5.xyzx  // r5.x <- S.x; r5.y <- S.y; r5.z <- S.z

#line 18
  mul r5.xyz, r10.xyzx, r5.xyzx
  mul r5.xyz, r8.xyzx, r5.xyzx
  mul r5.xyz, r3.wwww, r5.xyzx  // r5.x <- S.x; r5.y <- S.y; r5.z <- S.z

#line 19
  mov r5.xyz, r5.xyzx  // r5.x <- <BlinnPhong return value>.x; r5.y <- <BlinnPhong return value>.y; r5.z <- <BlinnPhong return value>.z

#line 67
  mov r5.xyz, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z

#line 70
  add r5.xyz, r5.xyzx, r6.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx

#line 54
  iadd r1.w, r1.w, l(1)

#line 71
endloop 

#line 72
add r0.xyz, r2.xyzx, r4.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 73
mul o0.w, r2.w, v2.w
mov o0.xyz, r0.xyzx
ret 
// Approximately 97 instruction slots used
