//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 camPos;                     // Offset:  128 Size:    16 [unused]
//   
//   struct lineLight
//   {
//       
//       float4 direction;              // Offset:  144
//       float4 color;                  // Offset:  160
//
//   } line_light;                      // Offset:  144 Size:    32 [unused]
//   
//   struct Light
//   {
//       
//       float4 pos;                    // Offset:  176
//       float4 color;                  // Offset:  192
//       float4 diffuse;                // Offset:  208
//       float4 specular;               // Offset:  224
//       float4 attenuate;              // Offset:  240
//
//   } pntLight[5];                     // Offset:  176 Size:   400 [unused]
//   
//   struct Material
//   {
//       
//       float4 ambient;                // Offset:  576
//       float4 diffuse;                // Offset:  592
//       float4 specular;               // Offset:  608
//
//   } material;                        // Offset:  576 Size:    48
//   row_major float4x4 bone_transforms[32];// Offset:  624 Size:  2048 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float       
// BONES                    0   xyzw        4     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[37], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weight.x; v3.y <- bone_weight.y; v3.z <- bone_weight.z; v3.w <- bone_weight.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o4.x <- <main return value>.texcoord.x; o4.y <- <main return value>.texcoord.y; 
//   o3.x <- <main return value>.normal.x; o3.y <- <main return value>.normal.y; o3.z <- <main return value>.normal.z; o3.w <- <main return value>.normal.w; 
//   o2.x <- <main return value>.color.x; o2.y <- <main return value>.color.y; o2.z <- <main return value>.color.z; o2.w <- <main return value>.color.w; 
//   o1.x <- <main return value>.posw.x; o1.y <- <main return value>.posw.y; o1.z <- <main return value>.posw.z; o1.w <- <main return value>.posw.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 6 "D:\Git\fps_shooting\Chi\Chi\Chi\skinned_mesh_vs.hlsl"
mul r0.xyzw, v0.xxxx, cb0[0].xyzw
mul r1.xyzw, v0.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 7
mul r1.xyzw, v0.xxxx, cb0[4].xyzw
mul r2.xyzw, v0.yyyy, cb0[5].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v0.zzzz, cb0[6].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, v0.wwww, cb0[7].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- vout.posw.x; r1.y <- vout.posw.y; r1.z <- vout.posw.z; r1.w <- vout.posw.w

#line 9
itof r2.x, l(0)  // r2.x <- normal.w

#line 10
mul r3.xyzw, v1.xxxx, cb0[4].xyzw
mul r4.xyzw, v1.yyyy, cb0[5].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, v1.zzzz, cb0[6].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r2.xyzw, r2.xxxx, cb0[7].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
dp4 r3.x, r2.xyzw, r2.xyzw
rsq r3.x, r3.x
mul r2.xyzw, r2.xyzw, r3.xxxx  // r2.x <- vout.normal.x; r2.y <- vout.normal.y; r2.z <- vout.normal.z; r2.w <- vout.normal.w

#line 11
mov r3.xyzw, cb0[36].xyzw  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z; r3.w <- vout.color.w

#line 12
mov r4.xy, v2.xyxx  // r4.x <- vout.texcoord.x; r4.y <- vout.texcoord.y

#line 13
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r3.xyzw
mov o3.xyzw, r2.xyzw
mov o4.xy, r4.xyxx
ret 
// Approximately 33 instruction slots used
