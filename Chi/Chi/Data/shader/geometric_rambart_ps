//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 camPos;                     // Offset:  128 Size:    16 [unused]
//   
//   struct lineLight
//   {
//       
//       float4 direction;              // Offset:  144
//       float4 color;                  // Offset:  160
//
//   } line_light;                      // Offset:  144 Size:    32 [unused]
//   
//   struct Light
//   {
//       
//       float4 pos;                    // Offset:  176
//       float4 color;                  // Offset:  192
//       float4 diffuse;                // Offset:  208
//       float4 specular;               // Offset:  224
//       float4 attenuate;              // Offset:  240
//
//   } pntLight[5];                     // Offset:  176 Size:   400
//   
//   struct Material
//   {
//       
//       float4 ambient;                // Offset:  576
//       float4 diffuse;                // Offset:  592
//       float4 specular;               // Offset:  608
//
//   } material;                        // Offset:  576 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[39], dynamicIndexed
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.posw.x; v1.y <- pin.posw.y; v1.z <- pin.posw.z; v1.w <- pin.posw.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 5 "D:\Git\fps_shooting\Chi\Chi\Chi\geometric_rambart_ps.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 10
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(5)
  breakc_z r2.x

#line 12
  imul null, r2.x, r1.w, l(5)
  itof r2.y, l(0)
  eq r2.x, r2.y, cb0[r2.x + 11].w
  if_nz r2.x

#line 13
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 14
  imul null, r2.x, r1.w, l(5)
  mov r2.yzw, -v1.xxyz
  add r2.xyz, r2.yzwy, cb0[r2.x + 11].xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z

#line 16
  dp3 r2.w, r2.xyzx, r2.xyzx
  rsq r2.w, r2.w
  mul r2.xyz, r2.wwww, r2.xyzx

#line 17
  dp3 r2.x, v2.xyzx, r2.xyzx
  max r2.x, r2.x, l(0.000000)
  mul r2.x, r2.x, l(0.500000)
  add r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r2.x <- R.x; r2.y <- R.y; r2.z <- R.z

#line 19
  mul r2.xyz, r2.xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb0[38].wwww
  mul r2.xyz, r2.xyzx, l(0.238739, 0.238739, 0.238739, 0.000000)
  imul null, r2.w, r1.w, l(5)
  mul r2.xyz, r2.xyzx, cb0[r2.w + 13].xyzx
  mul r2.xyz, r2.xyzx, cb0[37].xyzx  // r2.x <- diffuseColor.x; r2.y <- diffuseColor.y; r2.z <- diffuseColor.z

#line 21
  max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, r1.xyzx, r2.xyzx

#line 10
  iadd r1.w, r1.w, l(1)

#line 22
endloop 

#line 24
mov o0.xyz, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 38 instruction slots used
