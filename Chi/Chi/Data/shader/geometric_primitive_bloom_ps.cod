//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 camPos;                     // Offset:  128 Size:    16
//   
//   struct lineLight
//   {
//       
//       float4 pos;                    // Offset:  144
//       float4 direction;              // Offset:  160
//       float4 color;                  // Offset:  176
//
//   } line_light;                      // Offset:  144 Size:    48
//   
//   struct Light
//   {
//       
//       float4 pos;                    // Offset:  192
//       float4 color;                  // Offset:  208
//       float4 attenuate;              // Offset:  224
//
//   } pntLight[5];                     // Offset:  192 Size:   240
//   
//   struct Material
//   {
//       
//       float4 ambient;                // Offset:  432
//       float4 diffuse;                // Offset:  448
//       float4 specular;               // Offset:  464
//
//   } material;                        // Offset:  432 Size:    48
//   float4 judge_color;                // Offset:  480 Size:    16
//   float4 screen_size;                // Offset:  496 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// z_sample_state                    sampler      NA          NA             s1      1 
// z_map                             texture  float4          2d             t1      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[32], dynamicIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 12
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.posw.x; v1.y <- pin.posw.y; v1.z <- pin.posw.z; v1.w <- pin.posw.w; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; v2.w <- pin.normal.w; 
//   v3.x <- pin.texcoord.x; v3.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 67 "C:\Users\2180082.MAETEL\Desktop\„ÉÅE"
div r0.x, v0.x, cb0[31].x  // r0.x <- texpos.x
div r0.y, v0.y, cb0[31].y  // r0.y <- texpos.y

#line 68
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t1.xyzw, s1
mov r0.x, r0.x  // r0.x <- z

#line 70
mov r0.y, v0.z  // r0.y <- pos

#line 71
lt r0.x, r0.x, r0.y
if_nz r0.x

#line 72
  itof o0.xyzw, l(0, 0, 0, 0)
  ret 
endif 

#line 76
mov r0.xyz, v2.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z

#line 77
mov r1.xyz, -v1.xyzx
add r1.xyz, r1.xyzx, cb0[8].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- V.x; r1.y <- V.y; r1.z <- V.z

#line 80
mov r2.xyzw, -cb0[10].xyzw
dp4 r0.w, r2.xyzw, r2.xyzw
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- _L.x; r2.y <- _L.y; r2.z <- _L.z

#line 82
mov r3.xyz, cb0[27].xyzx  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z

#line 84
nop 
mov r0.xyz, r0.xyzx
mov r2.xyz, r2.xyzx
mov r4.xyz, cb0[11].xyzx
mov r5.xyz, cb0[28].xyzx

#line 17
dp3 r0.w, r0.xyzx, r2.xyzx
mul r0.w, r0.w, l(0.500000)
add r0.w, r0.w, l(0.500000)  // r0.w <- D

#line 18
mul r0.w, r0.w, r0.w

#line 19
mul r4.xyz, r4.xyzx, r5.xyzx
mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- <HalfLambart_L return value>.x; r4.y <- <HalfLambart_L return value>.y; r4.z <- <HalfLambart_L return value>.z

#line 84
mul r4.xyz, r4.xyzx, cb0[27].xyzx
nop 
mov r0.xyz, r0.xyzx
mov r2.xyz, r2.xyzx
mov r5.xyz, cb0[11].xyzx
mov r1.xyz, r1.xyzx
mov r6.xyz, cb0[29].xyzx
mov r0.w, cb0[29].w

#line 39
mul r7.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
dp3 r1.w, r0.xyzx, r2.xyzx
mul r7.xyz, r1.wwww, r7.xyzx
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, r7.xyzx  // r2.x <- H.x; r2.y <- H.y; r2.z <- H.z

#line 41
dp3 r2.z, r2.xyzx, r1.xyzx
mov r2.xyz, r2.zzzz  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z

#line 42
itof r7.xyz, l(0, 0, 0, 0)
max r2.xyz, r2.xyzx, r7.xyzx

#line 43
log r2.xyz, r2.xyzx
mul r2.xyz, r0.wwww, r2.xyzx
exp r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z

#line 44
mul r2.xyz, r6.xyzx, r2.xyzx
mul r2.xyz, r5.xyzx, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z

#line 45
mov r2.xyz, r2.xyzx  // r2.x <- <BlinnPhong_L return value>.x; r2.y <- <BlinnPhong_L return value>.y; r2.z <- <BlinnPhong_L return value>.z

#line 84
add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- _color.x; r2.y <- _color.y; r2.z <- _color.z

#line 88
mov r0.w, l(0)  // r0.w <- i
mov r4.xyz, r2.xyzx  // r4.x <- _color.x; r4.y <- _color.y; r4.z <- _color.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(5)
  breakc_z r2.w

#line 90
  imul null, r2.w, r1.w, l(3)
  itof r3.w, l(0)
  eq r2.w, r3.w, cb0[r2.w + 12].w
  if_nz r2.w

#line 91
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 93
  imul null, r2.w, r1.w, l(3)
  mov r5.xyz, -v1.xyzx
  add r5.xyz, r5.xyzx, cb0[r2.w + 12].xyzx  // r5.x <- L.x; r5.y <- L.y; r5.z <- L.z

#line 94
  dp3 r2.w, r5.xyzx, r5.xyzx
  sqrt r2.w, r2.w  // r2.w <- D

#line 95
  dp3 r3.w, r5.xyzx, r5.xyzx
  rsq r3.w, r3.w
  mul r5.xyz, r3.wwww, r5.xyzx

#line 96
  imul null, r3.w, r1.w, l(3)
  imul null, r4.w, r1.w, l(3)
  mul r4.w, r2.w, cb0[r4.w + 14].y
  add r3.w, r4.w, cb0[r3.w + 14].x
  imul null, r4.w, r1.w, l(3)
  mul r4.w, r2.w, cb0[r4.w + 14].z
  mul r2.w, r2.w, r4.w
  add r2.w, r2.w, r3.w
  div r2.w, l(1.000000), r2.w
  max r2.w, r2.w, l(0.000000)
  min r2.w, r2.w, l(1.000000)  // r2.w <- A

#line 98
  nop 
  mov r6.xyz, r0.xyzx
  mov r5.xyz, r5.xyzx
  imul null, r3.w, r1.w, l(3)
  mov r7.xyz, cb0[r3.w + 13].xyzx
  mov r8.xyz, cb0[28].xyzx
  mov r2.w, r2.w

#line 11
  dp3 r3.w, r6.xyzx, r5.xyzx
  mul r3.w, r3.w, l(0.500000)
  add r3.w, r3.w, l(0.500000)  // r3.w <- D

#line 12
  mul r3.w, r3.w, r3.w

#line 13
  mul r6.xyz, r7.xyzx, r8.xyzx
  mul r3.w, r2.w, r3.w
  mul r6.xyz, r3.wwww, r6.xyzx  // r6.x <- <HalfLambart return value>.x; r6.y <- <HalfLambart return value>.y; r6.z <- <HalfLambart return value>.z

#line 98
  mov r6.xyz, r6.xyzx  // r6.x <- diffuseColor.x; r6.y <- diffuseColor.y; r6.z <- diffuseColor.z

#line 101
  nop 
  mov r7.xyz, r0.xyzx
  mov r5.xyz, r5.xyzx
  imul null, r3.w, r1.w, l(3)
  mov r8.xyz, cb0[r3.w + 13].xyzx
  mov r9.xyz, r1.xyzx
  mov r10.xyz, cb0[29].xyzx
  mov r3.w, cb0[29].w
  mov r2.w, r2.w

#line 27
  mul r11.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  dp3 r4.w, r7.xyzx, r5.xyzx
  mul r7.xyz, r4.wwww, r11.xyzx
  mov r5.xyz, -r5.xyzx
  add r5.xyz, r5.xyzx, r7.xyzx  // r5.x <- H.x; r5.y <- H.y; r5.z <- H.z

#line 29
  dp3 r5.z, r5.xyzx, r9.xyzx
  mov r5.xyz, r5.zzzz  // r5.x <- S.x; r5.y <- S.y; r5.z <- S.z

#line 30
  itof r7.xyz, l(0, 0, 0, 0)
  max r5.xyz, r5.xyzx, r7.xyzx

#line 31
  log r5.xyz, r5.xyzx
  mul r5.xyz, r3.wwww, r5.xyzx
  exp r5.xyz, r5.xyzx  // r5.x <- S.x; r5.y <- S.y; r5.z <- S.z

#line 32
  mul r5.xyz, r10.xyzx, r5.xyzx
  mul r5.xyz, r8.xyzx, r5.xyzx
  mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- S.x; r5.y <- S.y; r5.z <- S.z

#line 33
  mov r5.xyz, r5.xyzx  // r5.x <- <BlinnPhong return value>.x; r5.y <- <BlinnPhong return value>.y; r5.z <- <BlinnPhong return value>.z

#line 101
  mov r5.xyz, r5.xyzx  // r5.x <- specularColor.x; r5.y <- specularColor.y; r5.z <- specularColor.z

#line 104
  add r5.xyz, r5.xyzx, r6.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx

#line 88
  iadd r1.w, r1.w, l(1)

#line 105
endloop 

#line 106
add r0.xyz, r3.xyzx, r4.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 107
ge r0.w, cb0[30].x, r0.x
if_nz r0.w

#line 108
  itof r0.x, l(0)
endif 

#line 109
ge r0.w, cb0[30].y, r0.y
if_nz r0.w

#line 110
  itof r0.y, l(0)
endif 

#line 111
ge r0.w, cb0[30].z, r0.z
if_nz r0.w

#line 112
  itof r0.z, l(0)
endif 

#line 114
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z
mov o0.w, cb0[27].w  // o0.w <- <main return value>.w
ret 
// Approximately 150 instruction slots used
