//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// DecalSampler                      sampler      NA          NA             s0      1 
// DiffuseTexture                    texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xy          3     NONE   float   xy  
// TEXCOORD                 2   xy          4     NONE   float   xy  
// TEXCOORD                 3   xy          5     NONE   float   xy  
// TEXCOORD                 4   xy          6     NONE   float   xy  
// TEXCOORD                 5   xy          7     NONE   float   xy  
// TEXCOORD                 6   xy          8     NONE   float   xy  
// TEXCOORD                 7   xy          9     NONE   float   xy  
// TEXCOORD                 8   xy         10     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xy
dcl_input_ps linear v7.xy
dcl_input_ps linear v8.xy
dcl_input_ps linear v9.xy
dcl_input_ps linear v10.xy
dcl_output o0.xyzw
dcl_temps 5
dcl_indexrange v2.xy 9
dcl_indexableTemp x0[9], 4
//
// Initial variable locations:
//   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
//   v1.x <- input.Color.x; v1.y <- input.Color.y; v1.z <- input.Color.z; v1.w <- input.Color.w; 
//   v2.x <- input.Tex[0].x; v2.y <- input.Tex[0].y; 
//   v3.x <- input.Tex[1].x; v3.y <- input.Tex[1].y; 
//   v4.x <- input.Tex[2].x; v4.y <- input.Tex[2].y; 
//   v5.x <- input.Tex[3].x; v5.y <- input.Tex[3].y; 
//   v6.x <- input.Tex[4].x; v6.y <- input.Tex[4].y; 
//   v7.x <- input.Tex[5].x; v7.y <- input.Tex[5].y; 
//   v8.x <- input.Tex[6].x; v8.y <- input.Tex[6].y; 
//   v9.x <- input.Tex[7].x; v9.y <- input.Tex[7].y; 
//   v10.x <- input.Tex[8].x; v10.y <- input.Tex[8].y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 9 "D:\Git\fps_shooting\Chi\Chi\Chi\bloom.hlsli"
mov r0.xyz, l(1.200000,1.000000,0.800000,0)  // r0.x <- screenColor.x; r0.y <- screenColor.y; r0.z <- screenColor.z

#line 10
mov x0[0].x, l(0.125000)
mov x0[1].x, l(0.031250)
mov x0[2].x, l(0.062500)
mov x0[3].x, l(0.031250)
mov x0[4].x, l(0.062500)
mov x0[5].x, l(0.062500)
mov x0[6].x, l(0.031250)
mov x0[7].x, l(0.062500)
mov x0[8].x, l(0.031250)

#line 8 "D:\Git\fps_shooting\Chi\Chi\Chi\bloom_ps.hlsl"
itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z; r1.w <- color.w

#line 11
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r1.xyzx  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z
mov r2.w, r1.w  // r2.w <- color.w
mov r3.x, r0.w  // r3.x <- i
loop 
  ilt r3.y, r3.x, l(9)
  breakc_z r3.y

#line 12
  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v[r3.x + 2].xyxx, t0.xyzw, s0
  mov r3.y, x0[r3.x + 0].x
  mul r4.xyzw, r3.yyyy, r4.xyzw
  add r2.xyzw, r4.xyzw, r2.xyzw

#line 13
  iadd r3.x, r3.x, l(1)
endloop 

#line 15
mul r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 17
mov o0.xyz, r0.xyzx
mov o0.w, r2.w
ret 
// Approximately 28 instruction slots used
